==============
IIIF Validator
==============

.. image:: https://travis-ci.org/IIIF/image-validator.svg?branch=master
  :target: https://travis-ci.org/IIIF/image-validator
    
.. image:: https://coveralls.io/repos/github/IIIF/image-validator/badge.svg?branch=master
  :target: https://coveralls.io/github/IIIF/image-validator?branch=master


This validator supports the same validations that are available on the
`IIIF
<http://iiif.io/>`_ website at
`<http://iiif.io/api/image/validator/>`_.


Installation
------------

Installation from pypi
~~~~~~~~~~~~~~~~~~~~~

The following should install scripts, library, and the necessary dependencies::

   pip install iiif-validator

Manual installation
~~~~~~~~~~~~~~~~~~

Installation from `source code
<https://github.com/IIIF/image-validator>` can de done with::

   python setup.py install

which should install scripts, library, and the necessary dependencies. Note that ``setup.py`` includes directives to pin certain libraries to particular versions for compatibility.

The ``python-magic`` module requires ``libmagic`` which, on a mac, one can install with::

    brew install libmagic


Command line validator, ``iiif-validate.py``
--------------------------------------------

Then for an image served at ``http://localhost:8000/prefix/image_id``
the validator can be run with::

    iiif-validate.py -s localhost:8000 -p prefix -i image_id --version=2.1 -v

or similar to validate server with the test image. Use
``iiif-validate -h`` for parameter details.


Use with Travis CI
~~~~~~~~~~~~~~~~~

To install dependencies for this code the following lines must
be present in the ``install:`` section of ``.travis.yml``::

    install:
      - sudo apt-get update
      - sudo apt-get install libmagic-dev
      - pip install iiif_validator
      ...

and then a single validation can be added to the commands under
the ``script:`` section of ``.travis.yml``. For example, to test a
server running with base URI ``http://localhost:8000/prefix`` with
image ``image_id1`` at version 1.1, level 1, one might use::

    script:
      ...
      - iiif-validate.py -s localhost:8000 -p prefix -i image_id1 --version=1.1 --level 1 --quiet

The ``iiif-validate.py`` script returns 0 exit code on success, non-zero
on failure, in order to work easily with Travis CI.


Running the validator server, ``iiif-validator.py``
---------------------------------------------------

The primary installation of the validator server is on the `IIIF
<http://iiif.io/>`_ website at
`<http://iiif.io/api/image/validator/>`_.

Stand-alone server
~~~~~~~~~~~~~~~~~

The validator runs at `<http://localhost:8080/>`_ by default
and can be used to validate output from an image server. Using
the *iiif_testserver.py*, which defaults to
`<http://localhost:8000/>`_ and the *screen* utility::

    pip install iiif
    screen -d -m iiif_testserver.py --image-dir {/path/to/images/dir}
    screen -d -m iiif-validator.py
    iiif-validate.py --scheme={scheme} -s {host:port} -p {prefix} --level={level} --version={version} -i {identifier} --test={test} --verbose

For example::

  iiif-validate.py --scheme=http -s localhost:8000 -p 2.1_pil --level=2 -i 67352ccc-d1b0-11e1-89ae-279075081939 --test=info_json --verbose

    [1] test info_json PASS
      url: ['http://localhost:8000/2.1_pil/67352ccc-d1b0-11e1-89ae-279075081939/info.json']
      tests: ['required-field: width', 'required-field: height', 'type-is-int: height', 
              'type-is-int: width', 'required- field: @id', 'type-is-uri: @id', '@id is correct URI', 
              'required-field: @context', 'correct-context', 'required-field: protocol', 
              'correct-protocol', 'required-field: profile', 'is-list', 'profile-compliance', 
              'is-list', 'is-object', 'required-field: scaleFactors', 'required-field: width', 
              'type-is-int: width']
    
    Done (1 tests, 0 failures)

Different *size* and *region* example::

    iiif-validate.py --scheme=http -s localhost:8000 -p 2.1_pil --level=2 -i 67352ccc-d1b0-11e1-89ae-279075081939 --test=size_region --verbose

    [1] test size_region PASS
      url: ['http://localhost:8000/2.1_pil/67352ccc-d1b0-11e1-89ae-279075081939/800,200,100,100/52,52/0/default.jpg', 
            'http://localhost:8000/2.1_pil/67352ccc-d1b0-11e1-89ae-279075081939/600,700,100,100/83,83/0/default.jpg', 
            'http://localhost:8000/2.1_pil/67352ccc-d1b0-11e1-89ae-279075081939/100,500,100,100/42,42/0/default.jpg', 
            'http://localhost:8000/2.1_pil/67352ccc-d1b0-11e1-89ae-279075081939/200,600,100,100/57,57/0/default.jpg',
            'http://localhost:8000/2.1_pil/67352ccc-d1b0-11e1-89ae-279075081939/100,100,100,100/42,42/0/default.jpg']
      tests: ['8,2:True', '6,7:True', '1,5:True', '2,6:True', '1,1:True']
    
    Done (1 tests, 0 failures)


Validator server under WSGI
~~~~~~~~~~~~~~~~~~~~~~~~~~

*need docs here*

Running with Vagrant
--------------------

For ease of development and local testing, you can provision a virtual machine using Vagrant. To start Vagrant, ssh in, and run the validator on a site::

    vagrant up
    vagrant ssh
    cd /vagrant
    ./iiif-validate.py -h
    ./iiif-validate.py --scheme=https -s iiif.lib.ncsu.edu -p iiif --level=2 -i 67352ccc-d1b0-11e1-89ae-279075081939

In addition, the Vagrant configuration runs the validator as a WSGI application using ``mod_wsgi`` and Apache ``httpd``, accessible both from with the VM as well as the host machine at `<http://localhost:8080/>`_.

Editing this README
-------------------